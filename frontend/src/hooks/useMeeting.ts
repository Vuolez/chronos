// Custom hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–µ–π
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å API

import { useState, useCallback, useRef } from 'react';
import { meetingApi } from '../services';
import { 
  Meeting, 
  MeetingDetail, 
  Participant, 
  Availability,
  CreateMeetingRequest,
  AddParticipantRequest,
  UpdateAvailabilityRequest,
  ParticipantStatus
} from '../types';

interface UseMeetingState {
  // –î–∞–Ω–Ω—ã–µ
  meeting: Meeting | null;
  participants: Participant[];
  availabilities: Availability[];
  commonDates: string[];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  error: string | null;
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è UI
  selectedDates: string[];
  currentParticipantId: string | null;
}

interface UseMeetingActions {
  createMeeting: (request: CreateMeetingRequest) => Promise<Meeting | null>;
  loadMeeting: (shareToken: string) => Promise<boolean>;
  addParticipant: (name: string) => Promise<Participant | null>;
  updateAvailability: (participantId: string, dates: string[]) => Promise<boolean>;
  setCurrentParticipant: (participantId: string) => void;
  toggleDateSelection: (date: string) => void;
  clearError: () => void;
  
  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  startAutoRefresh: (shareToken: string, intervalMs?: number) => void;
  stopAutoRefresh: () => void;
}

export const useMeeting = (): UseMeetingState & UseMeetingActions => {
  const [state, setState] = useState<UseMeetingState>({
    meeting: null,
    participants: [],
    availabilities: [],
    commonDates: [],
    isLoading: false,
    error: null,
    selectedDates: [],
    currentParticipantId: null,
  });

  // Ref –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const autoRefreshInterval = useRef<NodeJS.Timeout | null>(null);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const updateState = useCallback((updates: Partial<UseMeetingState>) => {
    setState(prev => ({ ...prev, ...updates }));
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
  const createMeeting = useCallback(async (request: CreateMeetingRequest): Promise<Meeting | null> => {
    updateState({ isLoading: true, error: null });
    
    try {
      const meeting = await meetingApi.createMeeting(request);
      updateState({ 
        meeting,
        isLoading: false,
        participants: [],
        availabilities: [],
        selectedDates: [],
        currentParticipantId: null
      });
      return meeting;
    } catch (error) {
      updateState({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏'
      });
      return null;
    }
  }, [updateState]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏
  const loadMeeting = useCallback(async (shareToken: string): Promise<boolean> => {
    updateState({ isLoading: true, error: null });
    
    try {
      const meetingDetail = await meetingApi.getMeetingByToken(shareToken);
      
      console.log('üèóÔ∏è loadMeeting: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:', meetingDetail);
      console.log('üë• loadMeeting: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ API:', meetingDetail.participants.map(p => ({
        id: p.id,
        name: p.name,
        isAuthenticated: p.isAuthenticated,
        user: p.user,
        email: p.email
      })));
      
      updateState({
        meeting: meetingDetail.meeting,
        participants: meetingDetail.participants,
        availabilities: meetingDetail.availabilities,
        commonDates: meetingDetail.commonAvailableDates,
        isLoading: false,
        selectedDates: [],
        currentParticipantId: null
      });
      return true;
    } catch (error) {
      updateState({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–µ—á–∏'
      });
      return false;
    }
  }, [updateState]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const addParticipant = useCallback(async (name: string): Promise<Participant | null> => {
    if (!state.meeting) return null;
    
    updateState({ isLoading: true, error: null });
    
    try {
      const participant = await meetingApi.addParticipant(state.meeting.id, { name });
      updateState({ 
        participants: [...state.participants, participant],
        isLoading: false,
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫, –¥–µ–ª–∞–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–º
        currentParticipantId: state.participants.length === 0 ? participant.id : state.currentParticipantId
      });
      return participant;
    } catch (error) {
      updateState({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞'
      });
      return null;
    }
  }, [state.meeting, state.participants, updateState]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const updateAvailability = useCallback(async (participantId: string, dates: string[]): Promise<boolean> => {
    console.log('üîÑ updateAvailability: —É—á–∞—Å—Ç–Ω–∏–∫ =', participantId, '–¥–∞—Ç—ã =', dates);
    
    if (!state.meeting) {
      console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–µ');
      return false;
    }
    
    updateState({ isLoading: true, error: null });
    
    try {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã (–∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç —É —É—á–∞—Å—Ç–Ω–∏–∫–∞)
      const existingDates = state.availabilities
        .filter(a => a.participantId === participantId)
        .map(a => a.date);
      
      console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', existingDates);
      
      const newDates = dates.filter(date => !existingDates.includes(date));
      
      console.log('‚ú® –ù–æ–≤—ã–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', newDates);
      
      if (newDates.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        updateState({ isLoading: false });
        return true;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã
      const promises = newDates.map(date => {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞—Ç—ã:', date);
        return meetingApi.updateAvailability(state.meeting!.id, participantId, { date });
      });
      
      const newAvailabilities = promises.length > 0 ? await Promise.all(promises) : [];
      
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ availabilities:', newAvailabilities);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const updatedAvailabilities = [
        ...state.availabilities,
        ...newAvailabilities
      ];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
      const updatedParticipants = state.participants.map(p => 
        p.id === participantId 
          ? { ...p, status: ParticipantStatus.VOTED }
          : p
      );

      updateState({
        availabilities: updatedAvailabilities,
        participants: updatedParticipants,
        isLoading: false
      });
      
      console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, availabilities:', updatedAvailabilities.length);
      return true;
    } catch (error) {
      updateState({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'
      });
      return false;
    }
  }, [state.meeting, state.participants, state.availabilities, updateState]);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const setCurrentParticipant = useCallback((participantId: string) => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ availabilities
    const participantAvailabilities = state.availabilities.filter(
      availability => availability.participantId === participantId
    );
    const selectedDates = participantAvailabilities.map(availability => availability.date);
    
    updateState({ 
      currentParticipantId: participantId,
      selectedDates: selectedDates
    });
  }, [updateState, state.availabilities]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  const toggleDateSelection = useCallback((date: string) => {
    console.log('üìÖ toggleDateSelection: –¥–∞—Ç–∞ =', date, '—Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ =', state.currentParticipantId);
    
    const newSelectedDates = state.selectedDates.includes(date)
      ? state.selectedDates.filter(d => d !== date)
      : [...state.selectedDates, date];
    
    console.log('üìÖ –ù–æ–≤—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã:', newSelectedDates);
    updateState({ selectedDates: newSelectedDates });
    
    // updateAvailability —Ç–µ–ø–µ—Ä—å —Å–∞–º–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã
    if (state.currentParticipantId) {
      console.log('üìÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', state.currentParticipantId);
      updateAvailability(state.currentParticipantId, newSelectedDates);
    } else {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏');
    }
  }, [state.selectedDates, state.currentParticipantId, updateAvailability]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = useCallback(() => {
    updateState({ error: null });
  }, [updateState]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∏
  const refreshMeetingData = useCallback(async (shareToken: string) => {
    try {
      const meetingDetail = await meetingApi.getMeetingByToken(shareToken);
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      const newDataHash = JSON.stringify({
        participants: meetingDetail.participants.map(p => ({ id: p.id, name: p.name, isAuthenticated: p.isAuthenticated })),
        availabilities: meetingDetail.availabilities.map(a => ({ participantId: a.participantId, date: a.date })),
        commonDates: meetingDetail.commonAvailableDates
      });
      
      const currentDataHash = JSON.stringify({
        participants: state.participants.map(p => ({ id: p.id, name: p.name, isAuthenticated: p.isAuthenticated })),
        availabilities: state.availabilities.map(a => ({ participantId: a.participantId, date: a.date })),
        commonDates: state.commonDates
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (newDataHash !== currentDataHash) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã)');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ selectedDates –∏ currentParticipantId
        updateState({
          meeting: meetingDetail.meeting,
          participants: meetingDetail.participants,
          availabilities: meetingDetail.availabilities,
          commonDates: meetingDetail.commonAvailableDates,
        });
      } else {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }
  }, [state.participants, state.availabilities, state.commonDates, updateState]);

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const startAutoRefresh = useCallback((shareToken: string, intervalMs: number = 5000) => {
    stopAutoRefresh(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${intervalMs}ms`);
    autoRefreshInterval.current = setInterval(() => {
      refreshMeetingData(shareToken);
    }, intervalMs);
  }, [refreshMeetingData]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const stopAutoRefresh = useCallback(() => {
    if (autoRefreshInterval.current) {
      console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      clearInterval(autoRefreshInterval.current);
      autoRefreshInterval.current = null;
    }
  }, []);

  return {
    ...state,
    createMeeting,
    loadMeeting,
    addParticipant,
    updateAvailability,
    setCurrentParticipant,
    toggleDateSelection,
    clearError,
    startAutoRefresh,
    stopAutoRefresh,
  };
};