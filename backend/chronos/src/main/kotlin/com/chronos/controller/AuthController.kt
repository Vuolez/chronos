// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ –∏ –≤—ã–¥–∞–µ—Ç –Ω–∞—à–∏ JWT —Ç–æ–∫–µ–Ω—ã

package com.chronos.controller

import com.chronos.security.SecurityUtils
import com.chronos.service.JwtService
import com.chronos.service.UserService
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import java.util.*

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * ENDPOINTS:
 * 1. POST /auth/login - –æ–±–º–µ–Ω Yandex —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –Ω–∞—à JWT
 * 2. GET /auth/me - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * 3. POST /auth/logout - –≤—ã—Ö–æ–¥ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞)
 * 
 * FLOW –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:
 * 1. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞
 * 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST /auth/login —Å yandexToken
 * 3. –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —É –Ø–Ω–¥–µ–∫—Å–∞
 * 4. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
 * 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—à JWT —Ç–æ–∫–µ–Ω
 * 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º JWT —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
 * 7. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JWT –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
@RestController
@RequestMapping("/auth")
@CrossOrigin(origins = ["http://localhost:3000", "http://localhost:5173"], allowCredentials = "true")
class AuthController(
    private val userService: UserService,
    private val jwtService: JwtService
) {
    
    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω
     * 
     * –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢:
     * 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
     * 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —É –Ø–Ω–¥–µ–∫—Å–∞
     * 3. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—à JWT
     * 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º JWT + –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/login")
    fun login(@RequestBody request: LoginRequest): ResponseEntity<LoginResponse> {
        println("üîë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–æ–∫–µ–Ω–æ–º: ${request.yandexToken.take(10)}...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —É –Ø–Ω–¥–µ–∫—Å–∞ –∏ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val user = userService.authenticateWithYandex(request.yandexToken)
        
        if (user == null) {
            // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            println("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π")
            return ResponseEntity.badRequest().build()
        }
        
        println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω/—Å–æ–∑–¥–∞–Ω: ${user.name} (${user.email})")
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—à JWT —Ç–æ–∫–µ–Ω
        val jwtToken = jwtService.generateToken(user)
        println("üé´ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}")
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        val response = LoginResponse(
            token = jwtToken,
            user = UserInfo(
                id = user.id,
                email = user.email,
                name = user.name,
                avatarUrl = user.avatarUrl
            )
        )
        
        println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å JWT —Ç–æ–∫–µ–Ω–æ–º")
        return ResponseEntity.ok(response)
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * 
     * –¢–ï–ü–ï–†–¨ –†–ê–ë–û–¢–ê–ï–¢ –ß–ï–†–ï–ó SPRING SECURITY!
     * JWT —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–º.
     * –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π - –∑–∞–ø—Ä–æ—Å –¥–∞–∂–µ –Ω–µ –¥–æ–π–¥–µ—Ç –¥–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.
     * 
     * SecurityUtils.requireCurrentUser() –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Security Context
     */
    @GetMapping("/me")
    @CrossOrigin(origins = ["http://localhost:3000", "http://localhost:5173"], allowCredentials = "true")
    fun getCurrentUser(): ResponseEntity<UserInfo> {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Security Context
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –º–µ—Ç–æ–¥ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        val user = SecurityUtils.requireCurrentUser()
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        val userInfo = UserInfo(
            id = user.id,
            email = user.email,
            name = user.name,
            avatarUrl = user.avatarUrl
        )
        
        return ResponseEntity.ok(userInfo)
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     * 
     * JWT —Ç–æ–∫–µ–Ω—ã stateless (–±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è), –ø–æ—ç—Ç–æ–º—É "–≤—ã–π—Ç–∏" 
     * –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏–≤ —Ç–æ–∫–µ–Ω –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ.
     * 
     * –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫" —Ç–æ–∫–µ–Ω–æ–≤.
     */
    @PostMapping("/logout")
    fun logout(): ResponseEntity<Void> {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        // –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage
        return ResponseEntity.ok().build()
    }
}

/**
 * DTO –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
data class LoginRequest(
    val yandexToken: String  // –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –Ø–Ω–¥–µ–∫—Å OAuth
)

/**
 * DTO –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
data class LoginResponse(
    val token: String,    // –ù–∞—à JWT —Ç–æ–∫–µ–Ω
    val user: UserInfo    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
)

/**
 * DTO —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
data class UserInfo(
    val id: UUID,
    val email: String,
    val name: String,
    val avatarUrl: String?
)