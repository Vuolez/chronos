// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–∏—Å–∫, –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞

package com.chronos.service

import com.chronos.entity.User
import com.chronos.repository.UserRepository
import org.springframework.stereotype.Service
import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.bodyToMono
import java.time.Instant
import java.util.*

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * 
 * –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞ —á–µ—Ä–µ–∑ –∏—Ö API
 * 2. –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 3. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
 */
@Service
class UserService(
    private val userRepository: UserRepository,
    private val webClient: WebClient.Builder
) {
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * 
     * –ß–¢–û –î–ï–õ–ê–ï–¢:
     * 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ API –Ø–Ω–¥–µ–∫—Å–∞
     * 2. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id, email, –∏–º—è)
     * 3. –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
     * 
     * @param yandexToken —Ç–æ–∫–µ–Ω –æ—Ç –Ø–Ω–¥–µ–∫—Å OAuth
     * @return User –∏–ª–∏ null –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
     */
    fun authenticateWithYandex(yandexToken: String): User? {
        return try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            if (yandexToken == "test-token") {
                return createTestUser()
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞
            val yandexUserInfo = fetchYandexUserInfo(yandexToken)
                ?: return null
            
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            val existingUser = userRepository.findByYandexId(yandexUserInfo.id)
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            val userEmail = yandexUserInfo.default_email 
                ?: yandexUserInfo.emails?.firstOrNull()
                ?: "${yandexUserInfo.login}@yandex.ru"  // Fallback email
            
            println("üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userEmail")
            
            return if (existingUser != null) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                println("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${existingUser.email}")
                existingUser.apply {
                    name = yandexUserInfo.display_name ?: yandexUserInfo.real_name ?: yandexUserInfo.login
                    email = userEmail
                    avatarUrl = buildAvatarUrl(yandexUserInfo.default_avatar_id)
                }
                userRepository.save(existingUser)
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                println("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userEmail")
                try {
                    val newUser = User(
                        yandexId = yandexUserInfo.id,
                        email = userEmail,
                        name = yandexUserInfo.display_name ?: yandexUserInfo.real_name ?: yandexUserInfo.login,
                        avatarUrl = buildAvatarUrl(yandexUserInfo.default_avatar_id)
                    )
                    
                    userRepository.save(newUser)
                } catch (e: Exception) {
                    // –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ—Ç–æ–∫–æ–º
                    println("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ: ${e.message}")
                    val existingUserRetry = userRepository.findByYandexId(yandexUserInfo.id)
                    if (existingUserRetry != null) {
                        println("‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ")
                        existingUserRetry
                    } else {
                        throw e
                    }
                }
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å–æ–º: ${e.message}")
            null
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å API
     */
    private fun fetchYandexUserInfo(token: String): YandexUserInfo? {
        return try {
            println("üåê –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å API...")
            println("üîë –¢–æ–∫–µ–Ω: ${token.take(20)}...")
            
            val client = webClient.build()
            
            val response = client
                .get()
                .uri("https://login.yandex.ru/info")
                .header("Authorization", "OAuth $token")
                .header("User-Agent", "Chronos/1.0")
                .header("Host", "login.yandex.ru")
                .retrieve()
                .onStatus({ it.is4xxClientError }) { clientResponse ->
                    println("‚ùå 4xx –æ—à–∏–±–∫–∞: ${clientResponse.statusCode()}")
                    clientResponse.bodyToMono<String>().map { body ->
                        println("‚ùå –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: $body")
                        RuntimeException("Client error: ${clientResponse.statusCode()}")
                    }
                }
                .onStatus({ it.is5xxServerError }) { clientResponse ->
                    println("‚ùå 5xx –æ—à–∏–±–∫–∞: ${clientResponse.statusCode()}")
                    clientResponse.bodyToMono<String>().map { body ->
                        println("‚ùå –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: $body")
                        RuntimeException("Server error: ${clientResponse.statusCode()}")
                    }
                }
                .bodyToMono<YandexUserInfo>()
                .block(java.time.Duration.ofSeconds(10))
            
            println("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞:")
            println("   - ID: ${response?.id}")
            println("   - Login: ${response?.login}")
            println("   - Default Email: ${response?.default_email}")
            println("   - Display Name: ${response?.display_name}")
            println("   - Real Name: ${response?.real_name}")
            println("   - Avatar ID: ${response?.default_avatar_id}")
            println("   - Emails: ${response?.emails}")
            response
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å API:")
            println("   - –¢–∏–ø: ${e.javaClass.simpleName}")
            println("   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}")
            println("   - –ü—Ä–∏—á–∏–Ω–∞: ${e.cause?.message}")
            e.printStackTrace()
            
            // –ü—Ä–æ–±—É–µ–º fallback —á–µ—Ä–µ–∑ IP –∞–¥—Ä–µ—Å
            println("üîÑ –ü—Ä–æ–±—É–µ–º fallback —á–µ—Ä–µ–∑ IP –∞–¥—Ä–µ—Å...")
            try {
                val client = webClient.build()
                val responseByIp = client
                    .get()
                    .uri("https://87.250.254.120/info")
                    .header("Authorization", "OAuth $token")
                    .header("User-Agent", "Chronos/1.0")
                    .header("Host", "login.yandex.ru")
                    .retrieve()
                    .bodyToMono<YandexUserInfo>()
                    .block(java.time.Duration.ofSeconds(10))
                
                println("‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ —á–µ—Ä–µ–∑ IP:")
                println("   - ID: ${responseByIp?.id}")
                println("   - Login: ${responseByIp?.login}")
                responseByIp
            } catch (fallbackException: Exception) {
                println("‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${fallbackException.message}")
                null
            }
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    private fun createTestUser(): User {
        val testYandexId = "12345"
        val testEmail = "test@yandex.ru"
        
        val existingUser = userRepository.findByYandexId(testYandexId)
        
        return if (existingUser != null) {
            existingUser
        } else {
            val newUser = User(
                yandexId = testYandexId,
                email = testEmail,
                name = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                avatarUrl = null
            )
            
            userRepository.save(newUser)
        }
    }
    
    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ ID
     */
    private fun buildAvatarUrl(avatarId: String?): String? {
        return if (avatarId != null) {
            "https://avatars.yandex.net/get-yapic/$avatarId/islands-200"
        } else {
            null
        }
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     */
    fun findById(userId: UUID): User? {
        return userRepository.findById(userId).orElse(null)
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Yandex ID
     */
    fun findByYandexId(yandexId: String): User? {
        return userRepository.findByYandexId(yandexId)
    }
}

/**
 * DTO –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex API
 * 
 * –û–ë–™–Ø–°–ù–ï–ù–ò–ï: –Ø–Ω–¥–µ–∫—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
 * –ú—ã —Å–æ–∑–¥–∞–µ–º data class —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞–ø–∏—Ç—å JSON –≤ Kotlin –æ–±—ä–µ–∫—Ç.
 * 
 * –í–ê–ñ–ù–û: –ü–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ
 */
data class YandexUserInfo(
    val id: String,                    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ø–Ω–¥–µ–∫—Å–µ
    val login: String,                 // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    val default_email: String?,        // Email –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å null!)
    val display_name: String?,         // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    val real_name: String?,            // –ù–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è
    val default_avatar_id: String?,    // ID –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL
    val emails: List<String>?          // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö email (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
)