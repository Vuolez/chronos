services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: chronos-postgres
    environment:
      POSTGRES_DB: chronos
      POSTGRES_USER: chronos_user
      POSTGRES_PASSWORD: chronos_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chronos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chronos_user -d chronos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Spring Boot + Kotlin)
  chronos-backend:
    build:
      context: ./backend/chronos
      dockerfile: Dockerfile
    container_name: chronos-backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chronos
      - DB_USER=chronos_user
      - DB_PASSWORD=chronos_password
      # JVM настройки для Docker
      - JAVA_OPTS=-Xmx512m -Xms256m -Djava.net.preferIPv4Stack=true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chronos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (React + Nginx)
  chronos-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chronos-frontend
    ports:
      - "3000:3000"
    depends_on:
      chronos-backend:
        condition: service_healthy
    networks:
      - chronos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy (опционально для production)
  nginx-proxy:
    image: nginx:alpine
    container_name: chronos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - chronos-frontend
      - chronos-backend
    networks:
      - chronos-network
    restart: unless-stopped
    profiles:
      - production  # Включается только в продакшене

volumes:
  postgres_data:
    driver: local

networks:
  chronos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16